@Library('retort-lib') _
def label = "jenkins-${UUID.randomUUID().toString()}"

def ZCP_USERID = 'menya'
def DOCKER_IMAGE = 'boot-sample'
def K8S_NAMESPACE = 'menya'
def VERSION = '0.1.1'

podTemplate(label:label,
    // serviceAccount: "zcp-system-sa-${ZCP_USERID}",
    containers: [
        containerTemplate(name: 'maven', image: 'maven:3.5.2-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'helm', image: 'lachlanevenson/k8s-helm', ttyEnabled: true, command: 'cat')
    ],
    volumes: [
        hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
        configMapVolume(mountPath: '/var/config/menya-test', configMapName: 'zmon-kube-config'),
        persistentVolumeClaim(mountPath: '/root/.m2', claimName: 'zcp-jenkins-mvn-repo')
    ]) {

    node(label) {
        stage('SOURCE CHECKOUT') {
            def repo = checkout scm
            // env.SCM_INFO = repo.inspect()
        }

        stage('BUILD MAVEN') {
            container('maven') {
                mavenBuild goal: 'clean package', systemProperties:['maven.repo.local':"/root/.m2/${JOB_NAME}"], options: '-Dmaven.test.skip=true'
            }
        }

        stage('BUILD DOCKER IMAGE') {
            container('docker') {
                withEnv(['KUBECONFIG=/var/config/menya-test/kube-config-zmon.yml']) {
                    withFolderProperties{
                        dockerCmd.build tag: "${env.DOCKER_REGISTRY}/${DOCKER_IMAGE}:${VERSION}"
                        dockerCmd.push registry: env.DOCKER_REGISTRY, imageName: DOCKER_IMAGE, imageVersion: VERSION, credentialsId:"ibmcloud_token"
                    }
                }
            }
        }

        stage('DEPLOY') {
            container('kubectl') {

              withEnv(['KUBECONFIG=/var/config/menya-test/kube-config-zmon.yml']) {
                sh "kubectl get pods --namespace ${K8S_NAMESPACE}"
                withFolderProperties{
                  sh "echo ${env.DOCKER_REGISTRY}"
                }
              }


//                kubeCmd.apply file: 'k8s/service.yaml', namespace: K8S_NAMESPACE
//                yaml.update file: 'k8s/deploy.yaml', update: ['.spec.template.spec.containers[0].image': "${HARBOR_REGISTRY}/${DOCKER_IMAGE}:${VERSION}"]
//                kubeCmd.scale file: 'k8s/deploy.yaml', replicas: '0', namespace: K8S_NAMESPACE
//                kubeCmd.apply file: 'k8s/deploy.yaml', namespace: K8S_NAMESPACE, wait: 300
            }
        }
        stage('HELM') {
            container('helm') {

              withEnv(['KUBECONFIG=/var/config/menya-test/kube-config-zmon.yml']) {
                sh 'helm list'
              }
            }
        }
    }
}
